<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>视频解析工具</title>
    <style>
        :root {
            --primary-color: #2196F3;
            --success-color: #4CAF50;
            --danger-color: #f44336;
            --bg-color: #f5f5f5;
            --text-color: #212121;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background: var(--bg-color);
            color: var(--text-color);
            line-height: 1.5;
            margin: 0;
            padding: 15px;
        }

        .container {
            max-width: 100%;
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            padding: 20px 15px;
            margin-bottom: 20px;
            overflow: hidden;
        }

        .input-group {
            display: flex;
            flex-direction: column;
            gap: 10px;
            margin-bottom: 20px;
        }

        input {
            width: calc(100% - 4px);
            padding: 12px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 16px;
            -webkit-appearance: none;
            box-sizing: border-box;
            background: #fcfcfc;
            transition: all 0.3s ease;
        }

        input:focus {
            border-color: var(--primary-color);
            background: white;
            outline: none;
            box-shadow: 0 0 0 3px rgba(33, 150, 243, 0.1);
        }

        .btn-group {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        .btn {
            flex: 1;
            padding: 12px;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            text-align: center;
            min-width: 120px;
        }

        .btn-primary {
            background: var(--primary-color);
            color: white;
        }

        .btn-danger {
            background: var(--danger-color);
            color: white;
        }

        .btn:active {
            transform: scale(0.98);
        }

        .result {
            margin-top: 20px;
            opacity: 0;
            transform: translateY(10px);
            transition: all 0.3s ease;
        }

        .result.show {
            opacity: 1;
            transform: translateY(0);
        }

        .video-info {
            display: flex;
            flex-direction: column;
            gap: 15px;
            margin-bottom: 20px;
        }

        .cover {
            width: 100%;
            height: auto;
            border-radius: 8px;
            aspect-ratio: 16/9;
            object-fit: cover;
        }

        .video-title {
            margin: 0;
            font-size: 1.3em;
            line-height: 1.3;
        }

        video {
            width: 100%;
            border-radius: 8px;
            background: #000;
        }

        .links {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 8px;
            margin: 15px 0;
            font-size: 0.9em;
        }

        .links p {
            margin: 10px 0;
            word-break: break-all;
        }

        .button-group {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 10px;
            margin: 15px 0;
        }

        .btn-link {
            background: var(--success-color);
            color: white;
            padding: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

        .time {
            color: #757575;
            font-size: 0.85em;
            text-align: center;
            margin-top: 15px;
        }

        .error {
            color: var(--danger-color);
            background: #ffebee;
            padding: 15px;
            border-radius: 8px;
            margin: 15px 0;
            display: none;
        }

        @media (min-width: 768px) {
            .container {
                padding: 25px;
            }
            
            .input-group {
                flex-direction: row;
            }
            
            .btn {
                flex: none;
            }
            
            .video-info {
                flex-direction: row;
                align-items: center;
            }
            
            .cover {
                width: 240px;
                height: 135px;
            }
            
            .video-title {
                font-size: 1.5em;
            }
        }

        @media (max-width: 480px) {
            .container {
                padding: 15px 12px;
                border-radius: 10px;
            }
            
            input {
                font-size: 15px;
                padding: 10px 12px;
                border-width: 1.5px;
            }
            
            .btn {
                min-width: 100px;
                padding: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="input-group">
            <input type="text" id="urlInput" placeholder="请输入视频链接" enterkeyhint="go">
            <div class="btn-group">
                <button class="btn btn-primary" onclick="parseVideo()">解析视频</button>
                <button class="btn btn-danger" onclick="clearAll()" id="clearBtn" style="display: none;">清空</button>
            </div>
        </div>
        
        <div class="error" id="errorMsg"></div>
        
        <div class="result" id="result">
            <div class="video-info">
                <img class="cover" id="coverImg" src="" alt="视频封面" onerror="this.style.display='none'">
                <h2 class="video-title" id="videoTitle"></h2>
            </div>
            
            <video id="videoPlayer" controls playsinline>
                <source src="" type="video/mp4">
                您的浏览器不支持视频播放
            </video>
            
            <div class="links">
                <p>播放地址: <span id="playUrl"></span></p>
                <p>下载地址: <span id="downloadUrl"></span></p>
                <p>封面地址: <span id="coverUrl"></span></p>
            </div>
            
            <div class="button-group">
                <a href="#" class="btn btn-link" id="playBtn" target="_blank">
                    ▶️ 播放
                </a>
                <a href="#" class="btn btn-link" id="downloadBtn" target="_blank">
                    ⬇️ 下载
                </a>
                <a href="#" class="btn btn-link" id="coverBtn" target="_blank">
                    🖼️ 封面
                </a>
            </div>
            
            <div class="time" id="time"></div>
        </div>
    </div>

    <script>
        document.getElementById('urlInput').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') parseVideo()
        })

        async function parseVideo() {
            const urlInput = document.getElementById('urlInput')
            const resultDiv = document.getElementById('result')
            const errorMsg = document.getElementById('errorMsg')
            const clearBtn = document.getElementById('clearBtn')

            // 重置状态
            resultDiv.classList.remove('show')
            errorMsg.style.display = 'none'
            urlInput.blur()

            // 输入验证
            const videoUrl = urlInput.value.trim()
            if (!videoUrl) {
                showError('请输入有效的视频链接')
                return
            }

            try {
                // 添加请求状态指示
                const originalButtonText = document.querySelector('.btn-primary').innerHTML
                document.querySelector('.btn-primary').innerHTML = '解析中...'

                // 发送请求
                const response = await fetch(`https://api.yyy001.com/api/videoparse?url=${encodeURIComponent(videoUrl)}`)
                
                // 恢复按钮状态
                document.querySelector('.btn-primary').innerHTML = originalButtonText

                // 处理HTTP错误状态
                if (!response.ok) {
                    throw new Error(`请求失败 (HTTP ${response.status})`)
                }

                // 处理响应数据
                const responseText = await response.text()
                console.log('原始响应:', responseText) // 调试用
                const data = JSON.parse(responseText)

                // 处理业务逻辑错误
                if (!data.success) {
                    throw new Error(data.message || '未知错误')
                }

                // 更新界面
                updateUI(data)
                resultDiv.classList.add('show')
                clearBtn.style.display = 'inline-block'

            } catch (error) {
                console.error('解析错误:', error)
                showError(`操作失败: ${error.message}`)
                document.querySelector('.btn-primary').innerHTML = '解析视频'
            }
        }

        function updateUI(data) {
            // 封面图片处理
            const coverImg = document.getElementById('coverImg')
            if (data.data.cover) {
                coverImg.style.display = 'block'
                coverImg.src = data.data.cover
            } else {
                coverImg.style.display = 'none'
            }

            // 视频信息更新
            document.getElementById('videoTitle').textContent = data.data.title || '未知标题'
            document.getElementById('time').textContent = `响应时间: ${data.time}`

            // 视频播放器处理
            const videoSource = document.getElementById('videoPlayer').querySelector('source')
            videoSource.src = data.data.play_url
            document.getElementById('videoPlayer').load()

            // 链接处理
            const setLink = (id, url) => {
                const element = document.getElementById(id)
                element.textContent = url
                element.parentElement.style.display = url ? 'block' : 'none'
            }

            setLink('playUrl', data.data.play_url)
            setLink('downloadUrl', data.data.url)
            setLink('coverUrl', data.data.cover)

            // 按钮链接处理
            document.getElementById('playBtn').href = data.data.play_url || '#'
            document.getElementById('downloadBtn').href = data.data.url || '#'
            document.getElementById('coverBtn').href = data.data.cover || '#'
        }

        function showError(message) {
            const errorMsg = document.getElementById('errorMsg')
            errorMsg.textContent = message
            errorMsg.style.display = 'block'
        }

        function clearAll() {
            document.getElementById('urlInput').value = ''
            document.getElementById('result').classList.remove('show')
            document.getElementById('errorMsg').style.display = 'none'
            document.getElementById('clearBtn').style.display = 'none'
            
            // 重置所有内容
            document.getElementById('coverImg').src = ''
            document.getElementById('videoTitle').textContent = ''
            document.getElementById('videoPlayer').querySelector('source').src = ''
            document.getElementById('videoPlayer').load()
            
            ['playUrl', 'downloadUrl', 'coverUrl'].forEach(id => {
                document.getElementById(id).textContent = ''
            })
            
            document.getElementById('time').textContent = ''
        }
    </script>
</body>
</html>